// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one

INSERT INTO refresh_tokens (
    id, 
    created_at, 
    updated_at, 
    user_id,
    expires_at,
    revoked_at 
    )
VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ExpiresAt,
		arg.RevokedAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefreshTokenById = `-- name: GetRefreshTokenById :one

SELECT refresh_tokens.id, refresh_tokens.user_id, refresh_tokens.expires_at, refresh_tokens.revoked_at
  FROM refresh_tokens
  WHERE refresh_tokens.id = $1
    AND refresh_tokens.expires_at IS NOT NULL
  LIMIT 1
`

type GetRefreshTokenByIdRow struct {
	ID        string
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetRefreshTokenById(ctx context.Context, id string) (GetRefreshTokenByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenById, id)
	var i GetRefreshTokenByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec

UPDATE refresh_tokens 
   SET updated_at = $2,
    revoked_at = $3
 WHERE id = $1
`

type RevokeRefreshTokenParams struct {
	ID        string
	UpdatedAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) RevokeRefreshToken(ctx context.Context, arg RevokeRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, arg.ID, arg.UpdatedAt, arg.RevokedAt)
	return err
}
